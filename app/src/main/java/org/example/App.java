/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.example.config.ConfigurationManager;
import org.example.config.model.AppConfiguration;

import java.util.concurrent.CompletableFuture;

public class App {

    public static void main(String[] args) {

        // Get the configuration manager instance
        ConfigurationManager configManager = ConfigurationManager.getInstance();

        // Define the default config file location
        String defaultConfigPath = "arch.yml";

        try {
            // If a config file was specified as an argument, use that instead
            String configPath = args.length > 0 ? args[0] : defaultConfigPath;

            // Load the configuration asynchronously
            CompletableFuture<AppConfiguration> configFuture =
                configManager.loadConfiguration(configPath);

            // Add a handler for successful loading
            configFuture.thenAccept(config -> {
                System.out.println("Configuration loaded successfully");
                System.out.println("• App builder: " + config.getApplication().getBuild());
                System.out.println("• SQL Engine: " + config.getSql().getEngine());
                System.out.println("• Base Package: " + config.getOutput().getBasePackage());
                System.out.println("• Schema Path: " + config.getSql().getSchema().getPath());
            });

            // Add error handling
            configFuture.exceptionally(ex -> {
                System.err.println("Failed to load configuration: " + ex.getMessage());
                return null;
            });

            // Wait for loading to complete (in real app, you might not block)
            configFuture.join();

            // Use the configuration
            if (configManager.isConfigured()) {
                AppConfiguration config = configManager.getConfiguration();
                String sqlPath = config.getSql().getSchema().getPath();
                System.out.println("Will process SQL file: " + sqlPath);

                // Continue with application logic...
            }
        } catch (Exception e) {
            System.err.println("Configuration error: " + e.getMessage());
        } finally {
            // Clean up resources
            configManager.shutdown();
        }

    }
}
